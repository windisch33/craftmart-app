# Cloudflare Tunnel Setup for CraftMart on cmioe.com

## Step 1: Get Your Cloudflare Tunnel Token

### Manual Steps (Do These First):

**A. Create the Tunnel in Cloudflare Dashboard:**
1. Go to https://dash.cloudflare.com and log in
2. Select your `cmioe.com` domain
3. Navigate to **Zero Trust** → **Networks** → **Tunnels**
4. Click **"Create a tunnel"**
5. Choose **"Cloudflared"** as connector type
6. Name your tunnel (e.g., `craftmart-production`)
7. Click **"Save tunnel"**
8. **Copy the tunnel token** from the command shown (it looks like a long string)

**B. Configure Domain Routing:**
1. In the tunnel configuration, add these routes:
   - **Subdomain**: `app` (so it becomes `app.cmioe.com`)
   - **Service**: `http://frontend:3000`
   - **Path**: Leave blank for main app
   
2. Optional: Add API route:
   - **Subdomain**: `api` 
   - **Service**: `http://backend:3001`
   - **Path**: Leave blank

## Step 2: Docker Implementation

### Files to Create/Modify:

**1. Update .env file:**
```env
# Add this line with your actual token
TUNNEL_TOKEN=your_tunnel_token_from_cloudflare_dashboard
DOMAIN=cmioe.com
```

**2. Update docker-compose.yml:**
Add cloudflared service to existing compose file:
```yaml
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: craftmart-tunnel
    command: tunnel --no-autoupdate run
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}
    restart: unless-stopped
    networks:
      - craftmart-network
    depends_on:
      - frontend
      - backend
```

**3. Update Backend CORS (backend/src/app.ts):**
Allow your domain in CORS settings:
```javascript
const corsOptions = {
  origin: ['https://app.cmioe.com', 'http://localhost:3000'],
  credentials: true
};
```

**4. Update Frontend Environment:**
Create production environment configuration for your domain:
```env
VITE_API_URL=https://api.cmioe.com
```

**5. Create Production Docker Compose (docker-compose.prod.yml):**
Optimized version for production deployment with proper builds and environment variables.

## Step 3: Deployment Configuration

### Production Setup Options:

**Option A: Simple Setup (Recommended)**
- `app.cmioe.com` → Frontend (React app)  
- `api.cmioe.com` → Backend API
- Two separate subdomains, simple routing

**Option B: Single Domain with Path Routing**
- `cmioe.com` → Frontend
- `cmioe.com/api` → Backend API  
- Requires Nginx reverse proxy for path-based routing

## Step 4: Security & Performance

### Updates Required:
1. **Environment Variables**: Secure token storage
2. **HTTPS Enforcement**: Automatic via Cloudflare  
3. **CORS Configuration**: Restrict to your domain only
4. **Database Security**: Keep PostgreSQL internal to Docker network
5. **Production Builds**: Optimized frontend and backend containers

## Expected Results:

After implementation:
✅ **https://app.cmioe.com** → Your CraftMart React frontend
✅ **https://api.cmioe.com** → Your Node.js/Express API (if using Option A)
✅ **Secure Connection**: No open ports, all traffic through Cloudflare
✅ **SSL Certificate**: Automatic HTTPS with Cloudflare certificate
✅ **DDoS Protection**: Built-in Cloudflare protection
✅ **Global CDN**: Fast loading worldwide through Cloudflare network

## Implementation Priority:
1. **HIGH**: Get tunnel token and create basic tunnel setup
2. **HIGH**: Update docker-compose.yml with cloudflared service  
3. **HIGH**: Configure CORS and environment variables
4. **MEDIUM**: Production optimization and security hardening
5. **LOW**: Advanced features like custom Nginx routing

The domain `cmioe.com` will be professionally accessible with enterprise-grade security and performance once this setup is complete.

## What is Cloudflare Tunnel?

Cloudflare Tunnel is a secure service that creates outbound-only connections from your local infrastructure to Cloudflare's global network, eliminating the need for public IP addresses or open firewall ports. Key benefits include:

- **Enhanced Security**: No inbound traffic allowed, all connections initiated from your server
- **No Firewall Configuration**: Works with default firewall rules (outbound traffic allowed)
- **Free HTTPS/SSL**: Automatic certificate management through Cloudflare
- **Global Performance**: Traffic routed through Cloudflare's global CDN network
- **DDoS Protection**: Built-in protection at Cloudflare's edge

## How It Works:

1. **Installation**: Install cloudflared (or run via Docker)
2. **Outbound Connection**: cloudflared creates secure outbound connections to Cloudflare
3. **Traffic Routing**: Cloudflare routes internet traffic to your app through these secure tunnels
4. **No Open Ports**: Your server never exposes ports to the internet directly

This provides enterprise-grade security while maintaining simple Docker Compose deployment.